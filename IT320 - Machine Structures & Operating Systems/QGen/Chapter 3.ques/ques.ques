import random
import string

# positions of gate inputs relative to the center of the gate
ins = (None, (0), (-9, 9), (-12, 0, 12), (-15, -5, 5, 15))

def q3_0():
    """0) Create a Truth Table from a Boolean function."""
    terms=[]
    negs=[]
    cnt = random.randint(2,4)
    # Generate cnt terms, each with 2 to 4 variables
    while len(terms) < cnt:
        num = 0
        while num == 0 or num == 4 or num == 8:
            num = random.randint(3,15)
        if num in terms:
            continue
        else:
            terms.append(num)
        # Ensure that every literal appears at least once
        if len(terms) == cnt:
            t=0
            for i in range(cnt):
                t |= terms[i]
            if t != 15:
                terms=[]
                
    # Determine which variables will be negated in each term
    for i in range(cnt):
        negs.append(random.randint(0,15))
    # Convert the above coded stuff to a readable string.
    boolStr = "F = "
    for i in range(cnt):
        if terms[i] & 8: 
            boolStr += "A"
            if negs[i] & 8: boolStr += "'"
        if terms[i] & 4: 
            boolStr += "B"
            if negs[i] & 4: boolStr += "'"
        if terms[i] & 2: 
            boolStr += "C"
            if negs[i] & 2: boolStr += "'"
        if terms[i] & 1: 
            boolStr += "D"
            if negs[i] & 1: boolStr += "'"
        boolStr += " + "
    boolStr = boolStr[:-3]
    # Get just the terms out of this string.
    boolSplt = boolStr.split(" + ")
    boolSplt[0] = boolSplt[0][4:]
    
    # Compute the answer vector.
    ansList=[]
    for i in range(16):
        A = (i & 8) != 0
        B = (i & 4) != 0
        C = (i & 2) != 0
        D = (i & 1) != 0
        for term in boolSplt:
            t = True
            if string.find(term,"A'")>=0: t = t and not A
            elif "A" in term:t = t and A
            if string.find(term,"B'")>=0: t = t and not B
            elif "B" in term:t = t and B
            if string.find(term,"C'")>=0: t = t and not C
            elif "C" in term:t = t and C
            if string.find(term,"D'")>=0: t = t and not D
            elif "D" in term:t = t and D
            if t: break
        ansList.append(t)
    # Generate the actual Truth Table
    aStr = "The Truth Table for " + boolStr + " is:\n\n"
    aStr += "A B C D | F\n-----------\n"
    for i in range(16):
        aStr += qGenSupport.toBinary(i,4,1) + " | "
        if ansList[i]: aStr +=  "1\n"
        else: aStr +=  "0\n"

    q = [('text',(30,100),'blue',"What is the Truth Table associated with this Boolean equation?\n" +
                         boolStr + "\n\n")]
    a = [('text',(30,510),'black',aStr),
         ('text',(200,600),'navy',"Examine each term of the function, one at a time.\n"+
                         "Place a '1' in the Truth Table output column in each line of\n"+
                         "the table where all 'NOTed' literals of the term have a zero,\n"+
                         "the other literals included in the term have a one and literals not\n"+
                         "mentioned (if any) contain any value.\n\n"+
                         "Do this for all lines of the Truth Table that match the first term.\n"+
                         "Continue for the additional terms in the function.  When all terms have\n"+
                         "been processed, fill the lines that don't have '1' with '0'.")]
    
    return q,a        
 

def q3_1():
    """1) Write a Boolean equation (canonical SOP form) from a Truth Table."""
    vector = "0"*16
    for i in range(random.randint(3,5)):
        r = random.randint(0,15)
        vector = vector[:r] + "1" + vector[r+1:]
    qStr = "A B C D | F\n-----------\n"
    for i in range(16):
        qStr += qGenSupport.toBinary(i,4,1) + " | " + vector[i] + "\n"
    aStr = "F = "
    for i in range(16):
        if vector[i] == "1":
            aStr += "A"
            if (i&8) == 0: aStr += "'"
            aStr += "B"
            if (i&4) == 0: aStr += "'"
            aStr += "C"
            if (i&2) == 0: aStr += "'"
            aStr += "D"
            if (i&1) == 0: aStr += "'"
            aStr += " + "
    aStr = aStr[:-3]            
                
                
    q = [('text',(30,50),'blue',"Convert this Truth Table to a Boolean equation in canonical SOP form.\n\n\n" +
                         qStr + "\n")]
    a = [('text',(30,510),'black',"Each line where F==1 produces a term.\n"+
                         "Each term will have each literal included in it.\n"+
                         "The input values in the truth table will designate if each literal\n"+
                         "is included in its true (e.g. A) or inverted (e.g. A') form.\n\n"+
                         "The canonical SOP form is: "+aStr)]
    
    return q,a        

def lines(num,a,color):
    # Draw lines to connect first tier of gates to final gate
    if num == 2:
        a.append(('line', (125,600,175,600),color, 3)) # top gate
        a.append(('line', (175,600,175,631),color, 3))
        a.append(('line', (175,631,225,631),color, 3))
        a.append(('line', (125,680,175,680),color, 3)) # bottom gate
        a.append(('line', (175,680,175,649),color, 3))
        a.append(('line', (175,649,225,649),color, 3))
    if num == 3:
        a.append(('line', (125,600,175,600),color, 3)) # top gate
        a.append(('line', (175,600,175,668),color, 3))
        a.append(('line', (175,668,225,668),color, 3)) 
        a.append(('line', (125,680,225,680),color, 3)) # middle gate
        a.append(('line', (125,760,175,760),color, 3)) # bottom gate
        a.append(('line', (175,760,175,692),color, 3))
        a.append(('line', (175,692,225,692),color, 3))
    if num == 4:
        a.append(('line', (125,600,185,600),color, 3)) # top gate
        a.append(('line', (185,600,185,705),color, 3))
        a.append(('line', (185,705,225,705),color, 3)) 
        a.append(('line', (125,680,165,680),color, 3)) # second gate
        a.append(('line', (165,680,165,715),color, 3))
        a.append(('line', (165,715,225,715),color, 3))
        a.append(('line', (125,760,165,760),color, 3)) # third gate
        a.append(('line', (165,760,165,725),color, 3))
        a.append(('line', (165,725,225,725),color, 3))
        a.append(('line', (125,840,185,840),color, 3)) # bottom gate
        a.append(('line', (185,840,185,735),color, 3))
        a.append(('line', (185,735,225,735),color, 3))
 

def q3_2():
    """2) Implement a function using AND and OR gates."""
    terms=[]
    cnt = random.randint(2,4) # 2 to 4 terms
    # Generate 3 terms, each with 2 to 5 variables
    while len(terms) < cnt:
        num = 0
        while num == 0 or num == 4 or num == 8 or num == 16:
            num = random.randint(3,31)
        for i in range(len(terms)):
            x = terms[i] & num
            if x == terms[i] or x == num:
                terms = []
                break
        terms.append(num)
    # Convert the above coded stuff to a readable string.
    boolStr = "F = "
    for i in range(cnt):
        if terms[i] & 16: boolStr += "A"
        if terms[i] & 8:  boolStr += "B"
        if terms[i] & 4:  boolStr += "C"
        if terms[i] & 2:  boolStr += "D"
        if terms[i] & 1:  boolStr += "E"
        boolStr += " + "
    boolStr = boolStr[:-3]
    # Get just the terms out of this string.
    boolSplt = boolStr.split(" + ")
    boolSplt[0] = boolSplt[0][4:]
    q = [('text',(30,50),'blue',"Implement this function using AND gates and OR gates.\n\n" +
                         boolStr + "\n")]
    a = [('text',(30,510),'black',"This is the implementation of:  " + boolStr )]
    for i in range(len(terms)):
        a.append(('bitmap', (100, 600+i*80),None, 'AND'))
        for j in range(len(boolSplt[i])):
            a.append(('text', (30, 590+i*80+ins[len(boolSplt[i])][j]),'black',boolSplt[i][j]))
            a.append(('line', (45,600+i*80+ins[len(boolSplt[i])][j],75,600+i*80+ins[len(boolSplt[i])][j]),'black', 3))
    a.append(('bitmap', (250, 560+40*len(terms)),None, 'OR'+str(len(terms))))
    a.append(('line', (275, 560+40*len(terms),300,560+40*len(terms)),'black', 3))
    a.append(('text', (310, 550+40*len(terms)),'black','F'))
    # Draw lines connecting the first tier of gates with the final gate.
    lines(len(terms),a,'black')

    return q,a 
    

def q3_3():
    """3) Implement a function using only NAND gates."""
    terms=[]
    cnt = random.randint(2,4) # 2 to 4 terms
    # Generate 3 terms, each with 2 to 5 variables
    while len(terms) < cnt:
        num = 0
        while num == 0 or num == 4 or num == 8 or num == 16:
            num = random.randint(3,31)
        for i in range(len(terms)):
            x = terms[i] & num
            if x == terms[i] or x == num:
                terms = []
                break
        terms.append(num)
    # Convert the above coded stuff to a readable string.
    boolStr = "F = "
    for i in range(cnt):
        if terms[i] & 16: boolStr += "A"
        if terms[i] & 8:  boolStr += "B"
        if terms[i] & 4:  boolStr += "C"
        if terms[i] & 2:  boolStr += "D"
        if terms[i] & 1:  boolStr += "E"
        boolStr += " + "
    boolStr = boolStr[:-3]
    # Get just the terms out of this string.
    boolSplt = boolStr.split(" + ")
    boolSplt[0] = boolSplt[0][4:]
    q = [('text',(30,50),'blue',"Implement this function using only NAND gates.\n\n" +
                         boolStr + "\n")]
    a = [('text',(30,510),'black',"This is the NAND implementation of:  " + boolStr ),
         ('text',(360,570),'blue',"Remember that each of the NAND gates in left most tier\n"+
                         "implements the AND function.  The NAND gate on the right\n"+
                         "performs the OR function.\n\n"+
                         "The major difference between this and the\n"+
                         "AND-OR design is that the wires that connect\n"+
                         "the first tier of gates to the final gate\n"+
                         "have their signals inverted (shown in violet).")]
    for i in range(len(terms)):
        a.append(('bitmap', (100, 600+i*80),None, 'NAND'))
        for j in range(len(boolSplt[i])):
            a.append(('text', (30, 590+i*80+ins[len(boolSplt[i])][j]),'black',boolSplt[i][j]))
            a.append(('line', (45,600+i*80+ins[len(boolSplt[i])][j],75,600+i*80+ins[len(boolSplt[i])][j]),'black', 3))
    a.append(('bitmap', (250, 560+40*len(terms)),None, 'NAND'))
    a.append(('line', (275, 560+40*len(terms),300,560+40*len(terms)),'black', 3))
    a.append(('text', (310, 550+40*len(terms)),'black','F'))
    lines(len(terms),a,'violet')

    return q,a        

def NOT(a):
    c = []
    for i in range(len(a)):
        c.append(not a[i])
    return c

def OR(a,b):
    c = []
    for i in range(len(a)):
        c.append(a[i] or b[i])
    return c
    
def NOR(a,b):
    return NOT(OR(a,b))
    
def XOR(a,b):
    c = []
    for i in range(len(a)):
        c.append(a[i] ^ b[i])
    return c
    
def XNOR(a,b):
    return NOT(XOR(a,b))
    
def AND(a,b):
    c = []
    for i in range(len(a)):
        c.append(a[i] and b[i])
    return c
    
def NAND(a,b):
    return NOT(AND(a,b))

def q3_4():
    """4) Convert a combinational circuit to a Truth Table."""
    A = [0,0,0,0,1,1,1,1]
    B = [0,0,1,1,0,0,1,1]
    C = [0,1,0,1,0,1,0,1]
    gates = ['AND', 'OR2', 'XOR', 'NAND', 'NOR2', 'XNOR']
    funcs = [AND, OR, XOR, NAND, NOR, XNOR]
    simple = True   # will be false when gate outputs not all 0's or all 1's
    while simple:
        notLoc = random.randint(0,1)    
        G1 = random.randint(0,5)
        G2 = random.randint(0,5)
        G3 = random.randint(0,5)
        G4 = random.randint(0,5)
        if notLoc: #lower position
            wire1 = A
            wire2 = NOT(A)
        else: #upper position
            wire1 = NOT(A)
            wire2 = A
        G1out = funcs[G1](wire2,B)
        G2out = funcs[G2](wire2,C)
        G3out = funcs[G3](wire1,G1out)
        G4out = funcs[G4](G2out,G3out)
        simple = False
        s3=0
        s4=0
        for i in range(8):
            s3 += G3out[i]
            s4 += G4out[i]
        if s3 == 0 or s3 == 8 or s4 == 0 or s4 == 8: 
            simple = True
    
    q = [('text',(30,50),'blue',"Draw the Truth Table for this combinational circuit.")]
    a = [('text',(30,500),'black',"The Truth Table for this combinational circuit is:")]
    y=50
    c='black'
    for f in [q,a]:
        f.append(('text', (30,y+120),c,'A'))
        f.append(('text', (30,y+190),c,'B'))
        f.append(('text', (30,y+260),c,'C'))
        f.append(('line', (45,y+130,100,y+130),c,3))
        f.append(('line', (45,y+200,180,y+200),c,3))
        f.append(('line', (180,y+200,180,y+188),c,3))
        f.append(('line', (180,y+188,200,y+188),c,3))
        f.append(('line', (45,y+270,200,y+270),c,3))
        f.append(('dot', (80,y+130),c,4))
        f.append(('line', (80,y+130,80,y+170),c,3))
        f.append(('line', (80,y+170,100,y+170),c,3))
        if notLoc:
            f.append(('bitmap',(120,y+170),None,'NOT'))
            f.append(('bitmap',(120,y+130),None,'WIRE'))
        else:
            f.append(('bitmap',(120,y+130),None,'NOT'))
            f.append(('bitmap',(120,y+170),None,'WIRE'))
        f.append(('line',(145,y+130,300,y+130),c,3))
        f.append(('line',(145,y+170,200,y+170),c,3))
        f.append(('bitmap',(225,y+179),None,gates[G1]))
        f.append(('text',(215,y+169),'orange','G1'))
        f.append(('dot', (155, y+170),c,4))
        f.append(('line', (155,y+170,155,y+252),c,3))
        f.append(('line', (155,y+252,200,y+252),c,3))
        f.append(('bitmap',(225,y+261),None,gates[G2]))
        f.append(('text',(215,y+251),'orange','G2'))
        f.append(('line',(300,y+130,300,y+161),c,3))
        f.append(('line',(300,y+161,330,y+161),c,3))
        f.append(('line',(250,y+179,330,y+179),c,3))
        f.append(('bitmap',(355,y+170),None,gates[G3]))
        f.append(('text',(345,y+160),'orange','G3'))
        f.append(('line',(380,y+170,400,y+170),c,3))
        f.append(('line',(400,y+170,400,y+211),c,3))
        f.append(('line',(400,y+211,420,y+211),c,3))
        f.append(('line',(250,y+261,400,y+261),c,3))
        f.append(('line',(400,y+261,400,y+229),c,3))
        f.append(('line',(400,y+229,420,y+229),c,3))
        f.append(('bitmap',(445,y+220),None,gates[G4]))
        f.append(('text',(435,y+210),'orange','G4'))
        f.append(('line',(470,y+220,490,y+220),c,3))
        f.append(('text',(495,y+210),c,'F')) 
        y += 450
        
    ans = 'A B C | NOT   G1    G2    G3    G4(F)\n-------------------------------------\n'
    for i in range(8):
        ans += "%1d %1d %1d |  %1d  |  %1d  |  %1d  |  %1d  |  %1d\n"%(
                A[i],B[i],C[i],NOT(A)[i],G1out[i],G2out[i],G3out[i],G4out[i])
    a.append(('text',(560,600),'navy',ans))
    return q,a        

def q3_5():
    """5) Make an ALU perform the specified function."""
    ALU = [
        ("0","0","0","0","0","X","0","Both A and B are disabled. When ANDed, the result is zero"),
        ("0","0","0","0","1","X","0","B is disabled.  Anything ANDed with zero is zero"),
        ("0","0","0","1","0","X","0","A is disabled.  Anything ANDed with zero is zero"),
        ("0","0","0","1","1","X","B","B is ANDed with all-1's giving B"),
        ("0","0","1","0","0","X","0","B is disabled.  Anything ANDed with zero is zero"),
        ("0","0","1","0","1","X","0","B is disabled.  Anything ANDed with zero is zero"),
        ("0","0","1","1","0","X","A and B","Both A and B are delivered to an AND gate giving (A and B)"),
        ("0","0","1","1","1","X","A' and B","A's inverse and B are delivered to an AND gate giving (A' and B)"),
        ("0","1","0","0","0","X","0","Both A and B are disabled. When ORed, the result is zero"),
        ("0","1","0","0","1","X","-1","A and B are disabled.  A is inverted giving all 1's.  After ORing all 1's"),
        ("0","1","0","1","0","X","B","A is disabled.  ORing B with 0 gives B"),
        ("0","1","0","1","1","X","-1","A is disabled.  A is inverted giving all 1's.  ORing all 1's with anything gives all 1's"),
        ("0","1","1","0","0","X","A","A is enabled.  B is disabled giving 0's.  ORing A with 0's gives A"),
        ("0","1","1","0","1","X","A'","A is enabled and inverted.  B is disabled giving 0's.  Oring A' with 0's gives A'"),
        ("0","1","1","1","0","X","A or B","Both A and B are delivered to an OR gate giving (A or B)"),
        ("0","1","1","1","1","X","A' or B","A is inverted.  A' and B are delivered to an OR gate giving (A' or B)"),
        ("1","0","X","0","X","X","-1","B is disabled and then delivered to a NOT gate giving all 1's"),
        ("1","0","X","1","X","X","B'","B is enabled and delivered to a NOT gate giving B'"),
        ("1","1","0","0","0","0","0","Both A and B are disabled.  Adding 0 + 0 gives 0"),
        ("1","1","0","0","0","1","1","Both A and B are disabled.  Adding 0 + 0 with a 1 carried in gives 1"),
        ("1","1","0","0","1","0","-1","Disabled B gives 0.  Disabled A inverted gives all 1's.  Adding gives -1"),
        ("1","1","0","0","1","1","0","A and B are disabled.  A inverted is -1.  Adding with carry_in of 1 gives 0"),
        ("1","1","0","1","0","0","B","Only B is enabled.  B + 0 is B"),
        ("1","1","0","1","0","1","B + 1","Only B is enabled.  Carry_in is 1.  B + 0 + 1 is B + 1"),
        ("1","1","0","1","1","0","B - 1","Only B is enabled.  A inverted is -1.  Adding gives B - 1"),
        ("1","1","0","1","1","1","B","Only B is enabled.  A inverted is -1.  Carry_in is 1.  B + 1 - 1 is B"),
        ("1","1","1","0","0","0","A","Only A is enabled.  A + 0 is A"),
        ("1","1","1","0","0","1","A + 1","Only A is enabled.  Carry_in is 1.  A + 0 + 1 is A + 1"),
        ("1","1","1","0","1","0","-A -1","Inverted A gives 1's Complement for -A.   This is 2's Complement for (-A -1)"),
        ("1","1","1","0","1","1","-A","Inverted A gives 1's Complement for -A.   Adding 1 (carry) gives 2's Complement for -A"),
        ("1","1","1","1","0","0","A + B","A and B are both enabled.  Adding gives A + B"),
        ("1","1","1","1","0","1","A + B + 1","A and B are enabled.  Carry_in is 1.  Adding gives A + B + 1"),
        ("1","1","1","1","1","0","B - A - 1","Inverting A gives (-A -1).  Adding to B gives B - A - 1"),
        ("1","1","1","1","1","1","B - A","Inverting A and adding Carry_in gives -A.  Adding gives B - A")]
        
    ALUdict = {}
    for i in range(len(ALU)):
        ALUdict[ALU[i][6]]=None
    ALUkeys = ALUdict.keys()
    ALUq = ALUkeys[random.randrange(len(ALUkeys))]
    cnt = 0
    for tup in ALU:
        if tup[6] == ALUq: cnt += 1
    
    # Plans to use this to do colorizing are currently on hold...Maybe next semester.
    c0=[None]*10
    c1=[None]*10
    c2=[None]*10
    c3=[None]*10
    c4=[None]*10
    c5=[None]*10
    c6=[None]*10
    c7=[None]*10
    c0[0]='black'
    c3[0]='black'
    
    poss = ""
    if cnt > 1: poss = "Multiple solutions are possible."
    q = [('text',(30,50),'blue',"What control signals are necessary to cause this bit-slice ALU to output: "+ALUq)]
    q.append(('text',(30,70),'blue',"Provide 0, 1, or X (don't care) for each of F1, F0, EnA, EnB, InvA and Cin.\n"+
                                     "Cin is a Control signal for the LSB only.  "+poss))

    fig = [('text',(100, 125),'black',"B A")]
    fig.append(('text',(30,179),'black',"EnA"))
    fig.append(('text',(30,259),'black',"EnB"))
    fig.append(('text',(30,209),'black',"InvA"))
    fig.append(('text',(660,340),'black',"Cin"))
    fig.append(('text',(30,340),'black',"Cout"))
    fig.append(('text',(435,470),'black',"Out"))
    fig.append(('text',(30,405),'black',"F1"))
    fig.append(('text',(30,425),'black',"F0"))
    fig.append(('bitmap',(180,180),None,'AND'))
    fig.append(('bitmap',(180,260),None,'AND'))
    fig.append(('bitmap',(260,210),None,'XOR'))
    fig.append(('bitmap',(350,320),None,'AND-90'))
    fig.append(('bitmap',(420,320),None,'OR2-90'))
    fig.append(('bitmap',(490,320),None,'NOT-90'))
    fig.append(('rect',(535,325,600,375),'black',2))
    fig.append(('text',(540,330),'black',"Full\nAdder"))
    fig.append(('rect',(300,400,600,450),'black',2))
    fig.append(('text',(400,430),'black',"4-to-1 MUX"))
    fig.append(('text',(345,400),'black',"0"))
    fig.append(('text',(415,400),'black',"1"))
    fig.append(('text',(485,400),'black',"2"))
    fig.append(('text',(555,400),'black',"3"))
    fig.append(('text',(305,405),'black',"S1"))
    fig.append(('text',(305,425),'black',"S0"))
    fig.append(('line',(125,145,125,171),c3[0],3)) # A data
    fig.append(('line',(125,171,155,171),c3[0],3))
    fig.append(('line',(105,145,105,251),c3[0],3)) # B data
    fig.append(('line',(105,251,155,251),c3[0],3))
    fig.append(('line',(80,189,155,189),c0[0],3)) # EnA
    fig.append(('line',(80,269,155,269),c0[0],3)) # EnB
    fig.append(('line',(80,219,235,219),c0[0],3)) # InvA
    fig.append(('line',(205,180,220,180),c3[0],3)) # Data to XOR
    fig.append(('line',(220,180,220,201),c3[0],3))
    fig.append(('line',(220,201,235,201),c3[0],3))
    fig.append(('line',(285,210,585,210),c3[0],3)) # from XOR
    fig.append(('line',(585,210,585,325),c3[0],3))
    fig.append(('line',(359,210,359,295),c3[0],3))
    fig.append(('dot',(359,210),c3[0],4))
    fig.append(('line',(429,210,429,295),c3[0],3))
    fig.append(('dot',(429,210),c3[0],4))
    fig.append(('line',(205,260,550,260),c3[0],3)) # from B AND
    fig.append(('line',(550,260,550,325),c3[0],3))
    fig.append(('line',(341,260,341,295),c3[0],3))
    fig.append(('dot',(341,260),c3[0],4))
    fig.append(('line',(411,260,411,295),c3[0],3))
    fig.append(('dot',(411,260),c3[0],4))
    fig.append(('line',(490,260,490,295),c3[0],3))
    fig.append(('dot',(490,260),c3[0],4))
    fig.append(('line',(350,345,350,400),c3[0],3)) # AND to MUX
    fig.append(('line',(420,345,420,400),c3[0],3)) # OR to MUX
    fig.append(('line',(490,345,490,400),c3[0],3)) # NOT to MUX
    fig.append(('line',(560,375,560,400),c3[0],3)) # FA to MUX
    fig.append(('line',(600,350,650,350),'gray70',3)) # Cin
    fig.append(('line',(80,350,535,350),'gray70',3)) # Cout
    fig.append(('line',(120,350,135,345),'gray70',3))
    fig.append(('line',(120,350,135,355),'gray70',3))
    fig.append(('line',(450,450,450,470),c3[0],3)) # MUX out
    fig.append(('line',(450,470,445,455),c3[0],3))
    fig.append(('line',(450,470,455,455),c3[0],3))
    fig.append(('line',(80,415,300,415),c3[0],3)) # F1
    fig.append(('line',(80,435,300,435),c3[0],3)) # F0
    fig.append(('rect',(90,155,640,465),'orange',2))
    q += fig
    ans = "Number of possible solutions = " + str(cnt) + ".\n\n"
    
    for tup in ALU:
        if tup[6] == ALUq:
            ans += "F1 = %1s  F0 = %1s  EnA = %1s  EnB = %1s  InvA = %1s  Cin = %1s\n"%tup[:6]
            ans += tup[7] + "\n\n"
            
    a = [('text',(30,510),'navy',ans)]
    
    return q,a        

def q3_6():
    """6) Memory Configuration exercises."""
    
    cellCnt = ['1k','4k','16k','64k','256k','1M','4M','16M','64M','256M','1G']
    cCntPo2 = [ 10,  12,  14,   16,   18,    20,  22,  24,   26,   28,    30 ]
    cellSize =[ '1', '4', '8']
    cSizePo2 =[ 0, 2, 3]
    memCnt =  ['4k','8k','16k','32k','64k','128k','256k','512k','1M','2M','4M','8M','16M',
               '32M','64M','128M','256M','512M','1G','2G','4G']
    mCntPo2=  [12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
               25,  26,  27,  28,  29,  30,  31,  32]
    memSize  =['16', '32', '64']
    mSizePo2 =[4, 5, 6]
    
    selecting = True
    while selecting:
        ci = random.randrange(len(cellCnt))
        cj = random.randrange(len(cellSize))
        mi = random.randrange(len(memCnt))
        mj = random.randrange(len(memSize))
        selecting = False
        if cCntPo2[ci] > mCntPo2[mi]: selecting = True  # Chip has too many cells
        if cCntPo2[ci] +4 < mCntPo2[mi]: selecting = True # Chip is too small
        if cSizePo2[cj] +3 < mSizePo2[mj]: selecting = True # Chip is too narrow
        if (cCntPo2[ci] == mCntPo2[mi]) and (cSizePo2[cj] == mSizePo2[mj]): selecting = True # 1 chip
            
    q = [('text',(30,50),'blue',"Answer these questions for "+cellCnt[ci]+" x "+cellSize[cj]+" RAM chips.\n" +
                                 "a) How many bits are contained in the chip?\n" +
                                 "b) How many chips are needed to build a "+memCnt[mi]+" x "+memSize[mj]+" memory?\n" +
                                 "c) How many address lines are needed for this memory?\n" +
                                 "d) How many address lines go to each chip?\n" +
                                 "e) If a chip select circuit is needed, draw one using a decoder.")]
    a = [('text',(30,510),'navy',"a) To find the total number of bits contained in the chip, multiply the\n" +
                                  "number of cells on the chip ("+cellCnt[ci]+") by the number of bits per " +
                                  "cell ("+cellSize[cj]+").\nWorking in powers of 2 this is 2**"+str(cCntPo2[ci]) +
                                  " x 2**"+str(cSizePo2[cj])+".  The answer is thus 2**" + 
                                  str(cCntPo2[ci]+cSizePo2[cj]) + " bits."),
         ('text',(30,590),'black',"b) To determine the total number of chips needed to build a\n"+
                                   memCnt[mi]+" x "+memSize[mj]+" memory you should consider the number of bits\n" +
                                   "in a cell of the chip, called the chip width ("+cellSize[cj]+") and the number\n" +
                                   "of bits in a memory word, called the memory width ("+memSize[mj]+").  It is\n"
                                   "likely that the memory width will be an even multiple of the chip\n" +
                                   "width.  The width of the rectangle to the right represents the\n"
                                   "memory width.  The width of the interior rectangles represents\n"+
                                   "the chip width.\n" +
                                   "It is also necessary to find what multiple of the number of chip\n"+
                                   "cells is required to create the number of memory words.  In the\n"+
                                   "present case this is "+memCnt[mi]+" divided by "+cellCnt[ci]+".  This is represented\n"+
                                   "by the height of the rectangle to the right.\n"+
                                   "The total number of chips required is "+str(2**(mSizePo2[mj]-cSizePo2[cj]))+" times "+
                                   str(2**(mCntPo2[mi]-cCntPo2[ci]))+".\nThis gives a total of " +
                                   str((2**(mSizePo2[mj]-cSizePo2[cj]))*(2**(mCntPo2[mi]-cCntPo2[ci])))+" chips."),
         ('rect',(700,600,956,856),'blue',2),
         ('text',(30,890),'navy',"c) This memory has "+memCnt[mi]+" words.  This is 2**"+str(mCntPo2[mi])+" words.\n" +
                                    "The number of address lines needed for this memory is "+str(mCntPo2[mi])+"."),
         ('text',(30,945),'black',"d) Each chip has "+cellCnt[ci]+" cells.  This is 2**"+str(cCntPo2[ci])+" cells.\n" +
                                   "The number of address lines needed for this chip is "+str(cCntPo2[ci])+".  Real DRAM chips will use the smallest\n"+
                                   "number of pins possible and will thus use a RAS/CAS scheme to handle these addresses using\nhalf this many pins for the address.")]
    
    
    v = 2**(mSizePo2[mj]-cSizePo2[cj]) 
    h = 2**(mCntPo2[mi]-cCntPo2[ci])
    for i in range(v):
        a.append(('line',(700+i*256/v,600,700+i*256/v,856),'blue',1)) 
    for i in range(h):
        a.append(('line',(700,600+i*256/h,956,600+i*256/h),'blue',1))        
    if h == 1:
        a.append(('text',(30,1040),'navy',"e) Since in this case the number of cells in a RAM chip is the same as the number of words in\n"+
                                           "Memory to construct, no chip select circuit is needed."))
    else:
        a.append(('text',(30,1040),'navy',"e) A separate chip-select signal is needed for each row of chips in the above rectangle.\n"+
                                           "A decoder with "+str(mCntPo2[mi]-cCntPo2[ci])+ " inputs and "+str(h)+" outputs can be used for this purpose.  The inputs are\n" +
                                           "connected to the address lines that don't go directly to the chips.  The outputs go\nto the chip select input of each chip "+
                                           "in the corresponding row."))
        a.append(('rect',(150,1140,250,1300),'brown',2))
        a.append(('text',(195,1150),'brown',"D\ne\nc\no\nd\ne\nr"))
        if h==2:
            a.append(('text',(80,1210),'brown', "A0"))
            a.append(('line',(110,1220,150,1220),'brown',3))
            a.append(('text',(300,1190),'brown', "Row 0"))
            a.append(('text',(300,1230),'brown', "Row 1"))
            a.append(('line',(250,1200,290,1200),'brown',3))
            a.append(('line',(250,1240,290,1240),'brown',3))
        if h==4:
            Anum = 0
            for y in range(1200,1250,40):
                a.append(('text',(80,y-10),'brown',"A"+str(Anum)))
                Anum += 1
                a.append(('line',(110,y,150,y),'brown', 3))
            Anum = 0
            for y in range(1160,1290,40):
                a.append(('text',(300,y-10),'brown',"Row "+str(Anum)))
                Anum += 1
                a.append(('line',(250,y,290,y),'brown', 3))
        if h==8:
            Anum = 0
            for y in range(1180,1270,40):
                a.append(('text',(80,y-10),'brown',"A"+str(Anum)))
                Anum += 1
                a.append(('line',(110,y,150,y),'brown', 3))
            Anum = 0
            for y in range(1150,1300,20):
                a.append(('text',(300,y-10),'brown',"Row "+str(Anum)))
                Anum += 1
                a.append(('line',(250,y,290,y),'brown', 3))
        if h==16:
            Anum = 0
            for y in range(1160,1290,40):
                a.append(('text',(80,y-10),'brown',"A"+str(Anum)))
                Anum += 1
                a.append(('line',(110,y,150,y),'brown', 3))
            Anum = 0
            for y in range(1145,1300,10):
                if Anum == 0 or Anum == 15:
                    a.append(('text',(300,y-10),'brown',"Row "+str(Anum)))
                Anum += 1
                a.append(('line',(250,y,290,y),'brown', 3))        
                
    return q,a        


# list of question functions    
ques = [q3_0,q3_1,q3_2,q3_3,q3_4,q3_5,q3_6]
chapter = 3
