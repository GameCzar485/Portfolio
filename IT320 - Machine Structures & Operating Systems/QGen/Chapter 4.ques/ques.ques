import random
import string

x=(('0','1'),
   ('1','2'),
   ('2','4'),
   ('3','8'),
   ('4','16'),
   ('5','32'),
   ('6','64'),
   ('7','128'),
   ('8','256'),
   ('9','512'),
   ('10','1,024','1 kilobyte','1 thousand','1K'),
   ('11','2,048','2 kilobytes','2 thousand','2K'),
   ('12','4,096','4 kilobytes','4 thousand','4K'),
   ('13','8,192','8 kilobytes','8 thousand','8K'),
   ('14','16,384','16 kilobytes','16 thousand','16K'),
   ('15','32,768','32 kilobytes','32 thousand','32K'),
   ('16','65,536','64 kilobytes','64 thousand','64K'),
   ('17',str(2**17),'128 kilobytes','128 thousand','128K'),
   ('18',str(2**18),'256 kilobytes','256 thousand','256K'),
   ('19',str(2**19),'512 kilobytes','512 thousand','512K'),
   ('20',str(2**20),'1 megabyte','1 million','1M'),
   ('21',str(2**21),'2 megabytes','2 million','2M'),
   ('22',str(2**22),'4 megabytes','4 million','4M'),
   ('23',str(2**23),'8 megabytes','8 million','8M'),
   ('24',str(2**24),'16 megabytes','16 million','16M'),
   ('25',str(2**25),'32 megabytes','32 million','32M'),
   ('26',str(2**26),'64 megabytes','64 million','64M'),
   ('27',str(2**27),'128 megabytes','128 million','128M'),
   ('28',str(2**28),'256 megabytes','256 million','256M'),
   ('29',str(2**29),'512 megabytes','512 million','512M'),
   ('30',str(2**30),'1 gigabyte','1 billion','1G'),
   ('31',str(2**31),'2 gigabytes','2 billion','2G'),
   ('32',str(2**32),'4 gigabytes','4 billion','4G'),
   ('33',str(2**33),'8 gigabytes','8 billion','8G'),
   ('34',str(2**34),'16 gigabytes','16 billion','16G'),
   ('35',str(2**35),'32 gigabytes','32 billion','32G'),
   ('36',str(2**36),'64 gigabytes','64 billion','64G'),
   ('37',str(2**37),'128 gigabytes','128 billion','128G'),
   ('38',str(2**38),'256 gigabytes','256 billion','256G'),
   ('39',str(2**39),'512 gigabytes','512 billion','512G'),
   ('40',str(2**40),'1 terabyte','1 trillion'),
   ('41',str(2**41),'2 terabytes','2 trillion'),
   ('42',str(2**42),'4 terabytes','4 trillion'),
   ('43',str(2**43),'8 terabytes','8 trillion'),
   ('44',str(2**44),'16 terabytes','16 trillion'),
   ('45',str(2**45),'32 terabytes','32 trillion'))
       
def q4_0():
    """0) Compute number of address bits required."""
    z=random.randint(10,39)
    y=random.randint(4,6)
    q1=x[z][2]
    q2=str(2**y)
    a2=str(z+3-y)
    q = [('text',(30,100),'blue',"How many address bits are required to address a memory containing " +
                                  q1 + "?\n" +
                                  "What if the above is addressed as " + q2 + "-bit words instead of bytes?\n\n")]
                                  
    a = [('text',(30,510),'red',x[z][0] + " address bits are required when addressing by bytes and\n" +
                                 a2 + " address bits when addressing as " + q2 + "-bit words.")]

    return q,a        
 
def q4_1():
    """1) Compute total number of memory bits."""
    z=random.randint(10,39)
    q1=x[z][2]
    
    if z>16: qq="This is approximately " + x[z+3][3] + "."
    else:    qq=""
    
    q = [('text',(30,100),'blue',"How many bits are contained in a memory containing " + q1 + "?\n" +
                                  "How many bits if each of these above bytes also contains a parity bit?\n\n")]
                                  
    a = [('text',(30,510),'red',"The memory contains exactly 2**"+str(z+3)+" bits. " + qq + "\n" +
                                 "With parity bits, there are 9 bits per byte so the memory size is exactly 9 * 2**"+str(z)+" bits.\n" +
                                 "Since 9 is 8 + 1, this can be considered 2**"+str(z+3)+" + 2**"+str(z)+".\n")]

    return q,a

def q4_2():
    """2) Compute minimum memory size with given RAM chips."""
    z=random.randint(4,6)
    zstr=str(2**z)
    y=random.randint(10,30)
    ystr=x[y][4]
    yastr=x[y][3]
    b=1
    while b==1:
        b=random.randint(0,3)
    bstr=str(2**b)
    
    q = [('text',(30,100),'blue',"If you are building a memory that is " + zstr + " bits wide, what is the smallest memory\n" +
                                  "that can be constructed using RAM chips that are " + ystr + " by " + bstr + "?\n")]
                                  
    a = [('text',(30,510),'red',"It will require " + str(2**(z-b)) + " (" +zstr+ "/" +bstr+") of these chips to construct a word of memory.\n" +
                                 "With the chips specified, this will result in a memory containing " + ystr + " words.\n")]

    return q,a


ml=('JnS','Load','Store','Add','Subt','Input','Output','Halt','Skipcond','Jump','Clear','AddI','JumpI')

def q4_3():
    """3) Hand assemble a Marie instruction."""
    z=random.randrange(len(ml))
    nlabs=random.randint(2,4)
    labs = []
    while len(labs) < nlabs:
        l="ABCDFGHLMNSTXYZ"[random.randrange(15)]
        if l not in labs:
            labs.append(l)
    labs.sort()
    ins = ml[z]
    loc = random.randint(400,800)
    dloc = random.randint(20,100)
    code="Addr\n"
    
    if ins=='JnS':
        tloc=loc+dloc
        code += "%0x* "%(loc)+"        "+ins+"  "+labs[-1]+"\n"
        code += "             .\n"*3
        for l in labs:
            tloc += 1
            code += "%0x  "%(tloc)+l + ":"
            if l == labs[-1]: code += "      Hex  0"
            else:             code += "      ..."
            code += "\n"
        ans = "The opcode for this instruction is "+"%0x"%(z)+" and the target address is "+"%0x.\n"%(tloc)
        ans += "This makes the assembled instruction: "+"%0x%0x.\n"%(z,tloc)
        
    elif ins in ("Load","Store","Add","Subt","AddI"):
        tloc=loc+dloc
        slab=random.randrange(nlabs)
        xlab=labs[slab]
        code += "%0x* "%(loc)+"        "+ins+"  "+labs[slab]+"\n"
        code += "             .\n"*3
        for l in labs:
            tloc += 1
            code += "%0x  "%(tloc)+l + ":"
            code += "      Hex  "+"%0x"%(random.randrange(65530))
            if l == labs[slab]: 
                xloc = tloc
            code += "\n"
        ans = "The opcode for this instruction is "+"%0x"%(z)+" and the target address is "+"%0x.\n"%(xloc)
        ans += "This makes the assembled instruction: "+"%0x%0x.\n"%(z,xloc)
        
    elif ins in ("Input","Output","Halt","Clear"):
        slab=random.randrange(nlabs)
        xlab=labs[slab]
        tloc = loc
        for l in labs:
            tloc += 1
            if l == xlab: 
                code += "%0x* "%(tloc)+l+":       "+ins
            else:
                code += "%0x  "%(tloc)+l+":       ..."
            code += "\n"
        ans = "The opcode for this instruction is "+"%0x"%(z)+".  There is no target address.\n"
        ans += "This makes the assembled instruction: "+"%0x000.\n"%(z)
        
    elif ins == "Skipcond":
        slab=random.randrange(nlabs)
        xlab=labs[slab]
        tloc = loc
        test = random.randrange(3)
        teststr = "<=>"[test]
        for l in labs:
            tloc += 1
            if l == xlab: 
                code += "%0x* "%(tloc)+l+":       "+ins+"  "+teststr
            else:
                code += "%0x  "%(tloc)+l+":       ..."
            code += "\n"
        ans = "The opcode for this instruction is "+"%0x"%(z)+".  There is no target address\n"
        ans += "but the type of the test must be encoded.  " + teststr + " is encoded as " + qGenSupport.toBinary(test,2) + " in binary.\n"
        ans += "This makes the assembled instruction: "+"%0x%03x.\n"%(z,1024*test)
    
    elif ins == "Jump":
        tloc=loc-dloc
        slab=random.randrange(nlabs)
        xlab=labs[slab]
        for l in labs:
            tloc += 1
            code += "%0x  "%(tloc)+l + ":"
            if l == xlab: 
                code += "      Load  ..."
                xloc = tloc
            else:         
                code += "      ..."
            code += "\n"
        code += "             .\n"*3
        code += "%0x* "%(loc)+"        "+ins+"  "+xlab+"\n"
        ans = "The opcode for this instruction is "+"%0x"%(z)+" and the target address is "+"%0x.\n"%(xloc)
        ans += "This makes the assembled instruction: "+"%0x%0x.\n"%(z,xloc)
    
    elif ins == "JumpI":
        tloc=loc-dloc
        slab=random.randrange(nlabs)
        xlab=labs[slab]
        for l in labs:
            tloc += 1
            code += "%0x  "%(tloc)+l + ":"
            if l == xlab: 
                code += "      Hex  0"
                xloc = tloc
            else:         
                code += "      ..."
            code += "\n"
        code += "             .\n"*3
        code += "%0x* "%(loc)+"        "+ins+"  "+xlab+"\n"
        ans = "The opcode for this instruction is "+"%0x"%(z)+" and the target address is "+"%0x.\n"%(xloc)
        ans += "This makes the assembled instruction: "+"%0x%0x.\n"%(z,xloc)
            
    else:
        print "Instruction " + ins + " not found!"
        ans = "..."

    q = [('text',(30,100),'blue',"Hand assemble the instruction at the address with the *.\n" +
                                  "All labels and numerics are shown in hex."),
         ('text',(50,180),'black',code)]
                                  
    a = [('text',(30,510),'red',ans)]

    return q,a

def q4_4():
    """4) Disassemble a Marie instruction."""
    z=random.randrange(len(ml))
    ins = ml[z]
    loc = random.randrange(4095)
    locstr = str(loc)

    if ins in ("JnS","Load","Store","Add","Subt","AddI","Jump","JumpI"):
        assm = ins+" L"+locstr
        code = "%0x%03x"%(z,loc)
        
    elif ins in ("Input","Output","Halt","Clear"):
        assm = ins
        code = "%0x000"%(z)
        
    elif ins == "Skipcond":
        test = random.randrange(3)
        teststr = "<=>"[test]
        assm = ins+"  "+teststr
        code = "%0x%03x"%(z,1024*test)

    else:
        print "Instruction " + ins + " not found!"
        assm = "bad"
        code = "bad"

    q = [('text',(30,100),'blue',"Disassemble the following instruction (shown in hex).  Labels are not given.\n" +
                                  "If necessary, make a label with 'L' followed by the address in decimal."),
         ('text',(50,180),'black',code)]
                                  
    a = [('text',(50,510),'red',assm)]

    return q,a


# list of question functions    
ques = [q4_0, q4_1, q4_2, q4_3, q4_4]
chapter = 4
